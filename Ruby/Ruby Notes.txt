.chomp		remove new line of end of “gets”
.split		splits words by specified delimiter .split(//), (//) = split by character
.squeeze	remove white space from words
defined? x	gives you type of ‘x’
arr.map!	takes each each element in data structure and makes change	arr.map! {|grade| grade += points}




Numbers
.abs		absolute value
.div(x)	division by ‘x’
.modulo(x)	remainder
.to_s		convert number to string




Boolean Data- Has a true or false value

!		negates value


Ranges- Sequence of data
=== 	is to prove case	digits = 0..9, digits === 100, False


Arrays
x = digits.to_a		change range to array form
array.push(parameter)	adds ‘parameter’ to array


Hashes- Store data in keys, lookup key to find value
numbers = {
‘X’ => ‘123412’,
}


Variables and Constants
$		global

Constants are written in UPPERCASE



Parallel Assignment- Switches values
 a, b = b, a



Loops:
if
elsif
until
while
next or redo	loops back
break		exits loop and terminates program
exit		exits loop only


Iterators:
Times- x.times do				does statement ‘x’ number of times
Upto- y.upto(z) do |x| print x, “ “		prints numbers y-z
Step- 0.step(100,2) {|x| print x, " "}		from 0-100, every 2 numbers gets printed
Each- nums.each do |x| 	print x, “ “		pulls out each element in container (array) & prints



Methods:
def ‘square(parameter)’		defines method as ‘square’ and returns parameter
end				finish method definition
prompt(message)			display message passed as ‘message’
sum(*args)			takes method ’sum’ and takes all ‘args’ parameters supplied 
to_s				string method, used to show objects in class




Class: User defined type, Definition of abstract data type (ADT)

Abstract Data Type: Define objects
-properties/attributes
-behaviors/operations


class Name
	def initialize(properties/paramaters/objects)	#initialization/constructor
		@fields = parameters	#instance variables
	end

aName.inspect			shows associated attributes in class “Name”

self.[name of method]		internal class method


Shape Class



Inheritance: Is-a relationships

super(x,y)		inherit super class’ ‘x’ and ‘y’ instance variables
print(super)		inherit super class’ to_s method



Modules:

require ‘./file’

Mixings- includes module inside class

*more		indicates list



Exception Handling: Handling program errors

begin
	code causing exception
rescue
	handles exception to prevent program crash
end

catch (:stop)/throw :stop		break out of nested loop all the way to top



Input/Output

File.open(“fileName”)		opens file “filename”
File.new(“fileName”,”w”)	creates new file names “fileName”, change to “a+” to append to file
outfile				output object, like file handle 

outfile.print(“”)			write to file
ourfile.puts()


Network Programming

Client:
require "socket"		require soccer
host = “host”			“host to connect”
port = ####			port number ####

sock = TCPSocket.open(host, port)

Server:
require "socket"

server = TCPServer.open(1500)

client = server.accept			wait for client to connect



Debugger: Find logical error, not syntax errors, to find output not expected

-rdebug filename	requires debug switch
l			list lines of program
n			runs program line-by-line
disp “min”		displays value “min”
b 6			breakpoint at line 6
watch n==1		sets watchpoint where n = 1 
var local or v l	shows variables at particular time



Graphical User Interface TK (Tool Kit)


require		’tk’

root = TkRoot.new {title “TITLE”}
TkLabel.new(root) do
    text ‘text’
    pack {padx 15; pady 15; side 'left'}
end
Tk.mainloop
